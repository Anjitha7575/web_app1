{"version":3,"sources":["App.js","serviceWorker.js","reducers/index.js","actionTypes.js","index.js"],"names":["App","className","class","id","name","title","src","style","width","height","margin","padding","align","scrolling","allow","Boolean","window","location","hostname","match","combineReducers","allMovies","state","action","type","payload","loginResponse","submitUserResponse","allLanguages","middlewares","compose","applyMiddleware","thunk","devToolsExtension","f","appStore","createStore","rootReducer","undefined","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAyBeA,MApBf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKC,MAAM,oBACT,4BACEC,GAAG,IACHC,KAAK,WACLC,MAAM,QACNC,IAAI,oDACJC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,OAAQ,MAAOC,QAAS,OAChEC,MAAM,SACNC,UAAU,MACVC,MAAM,yB,cCLIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCuBSC,cAAgB,CAC3BC,UApCc,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACtC,OAAQA,EAAOC,MACX,ICNwB,mBDOpB,OAAO,2BAAKF,GAAUC,EAAOE,SACjC,QACI,OAAOH,IAgCfI,cA7BkB,WAAyB,IAAxBJ,EAAuB,uDAAf,GAAIC,EAAW,uCAC1C,OAAQA,EAAOC,MACX,ICT6B,wBDUzB,OAAO,2BAAKF,GAAUC,EAAOE,SACjC,QACI,OAAOH,IAyBfK,mBArBuB,WAAyB,IAAxBL,EAAuB,uDAAf,GAAIC,EAAW,uCAC/C,OAAQA,EAAOC,MACX,ICjB8B,yBDkB1B,OAAO,2BAAKF,GAAUC,EAAOE,SACjC,QACI,OAAOH,IAiBfM,aAbiB,WAAyB,IAAxBN,EAAuB,uDAAf,GAAIC,EAAW,uCACzC,OAAQA,EAAOC,MACX,ICzB4B,uBD0BxB,OAAO,2BAAKF,GAAUC,EAAOE,SACjC,QACI,OAAOH,ME1BbO,G,MAAcC,YAClBC,YAAgBC,KAChBhB,OAAOiB,kBAAoBjB,OAAOiB,kBAAkB,CAAE7B,KAAM,YAAe,SAAA8B,GAAC,OAAIA,KAG5EC,EAAWC,YAAYC,OAAaC,EAAWT,GAErDU,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOP,GACjB,kBAAC,EAAD,QAGFQ,SAASC,eAAe,SH2GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aad29e4f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n// import Header from './features/Header/component';\n// import Dashboard from './features/Dashboard/container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div class=\"iframe-container\">\n        <iframe\n          id=\"1\"\n          name=\"my_frame\"\n          title=\"Title\"\n          src=\"https://app.forms.dev.repute.net/anjtest_dev/dev3\"\n          style={{ width: '100%', height: '100%', margin: '0px', padding: '0px' }}\n          align=\"center\"\n          scrolling=\"yes\"\n          allow=\"camera;microphone\"\n        ></iframe>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\nimport {\n    FETCH_ALL_MOVIES, LOGIN_PROCESS_LOADING,\n    SUBMIT_PROCESS_LOADING, GET_LANGUAGE_OPTIONS,\n} from '../actionTypes';\n\nconst allMovies = (state = {}, action) => {\n    switch (action.type) {\n        case FETCH_ALL_MOVIES:\n            return { ...state, ...action.payload };\n        default:\n            return state;\n    }\n}\nconst loginResponse = (state = {}, action) => {\n    switch (action.type) {\n        case LOGIN_PROCESS_LOADING:\n            return { ...state, ...action.payload };\n        default:\n            return state;\n    }\n}\n\nconst submitUserResponse = (state = {}, action) => {\n    switch (action.type) {\n        case SUBMIT_PROCESS_LOADING:\n            return { ...state, ...action.payload };\n        default:\n            return state;\n    }\n}\n\nconst allLanguages = (state = [], action) => {\n    switch (action.type) {\n        case GET_LANGUAGE_OPTIONS:\n            return { ...state, ...action.payload };\n        default:\n            return state;\n    }\n}\n\nexport default combineReducers({\n    allMovies: allMovies,\n    loginResponse: loginResponse,\n    submitUserResponse: submitUserResponse,\n    allLanguages: allLanguages\n});","// export const FETCH_ALL_BOOKS = 'FETCH_ALL_BOOKS';\n// export const FETCH_ALL_CHAPTER_BOOKID = 'FETCH_ALL_CHAPTER_BOOKID';\nexport const FETCH_ALL_MOVIES = 'FETCH_ALL_MOVIES';\n// export const FETCH_ALL_QUOTES_MOVIEID = 'FETCH_ALL_QUOTES_MOVIEID';\n// export const FETCH_ALL_CHARACTERS = 'FETCH_ALL_CHARACTERS';\n// export const FETCH_ALL_QUOTE_CHARID = 'FETCH_ALL_QUOTE_CHARID';\n// export const FETCH_ALL_QUOTES = 'FETCH_ALL_QUOTES';\nexport const LOGIN_PROCESS_LOADING = 'LOGIN_PROCESS_LOADING';\nexport const SUBMIT_PROCESS_LOADING = 'SUBMIT_PROCESS_LOADING';\nexport const GET_LANGUAGE_OPTIONS = 'GET_LANGUAGE_OPTIONS';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport {createStore, compose, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducers';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n\nconst middlewares = compose(\n  applyMiddleware(thunk),\n  window.devToolsExtension ? window.devToolsExtension({ name: 'lordApp' }) : f => f\n);\n\nconst appStore = createStore(rootReducer, undefined, middlewares);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={appStore}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}