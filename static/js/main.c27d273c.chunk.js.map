{"version":3,"sources":["features/IframeTest.js","features/TextBtn.js","App.js","serviceWorker.js","actionTypes.js","reducers/index.js","index.js"],"names":["IframeTest","props","location","state","_get","console","log","onMessageReceivedFromIframe","React","useCallback","event","data","type","status","source","postMessage","responseData","useEffect","window","addEventListener","removeEventListener","useMemo","class","id","name","title","src","style","width","height","margin","display","justifyContent","align","scrolling","allow","TextBtn","useState","token","employerId","tid","domain","setState","handleChange","e","target","value","prevState","flexDirection","alignContent","onChange","fontSize","to","pathname","App","component","path","exact","Boolean","hostname","match","combineReducers","allMovies","action","payload","loginResponse","submitUserResponse","allLanguages","middlewares","compose","applyMiddleware","thunk","devToolsExtension","f","appStore","createStore","rootReducer","undefined","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c27d273c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport _get from 'lodash/get';\n\nfunction IframeTest(props) {\n    const { location } = props;\n    const state = _get(location, 'state', {});\n    console.log('location', state);\n    const onMessageReceivedFromIframe = React.useCallback(\n        event => {\n            console.log(\"onMessageReceivedFromIframe\", event.data.type, event.data.status);\n            if (event.data.type === 'iFrameRequest_Repute') {\n                console.log(\"onMessageReceivedFromIframe434w3\");\n                let obj = {\n                    type: 'parentResponse',\n                    responseData: 'Response #' + ' session_timeout'\n                };\n                event.source.postMessage(obj, '*');\n                // window.location.href = '/web_app1';\n            }\n        },\n        []\n    );\n\n    useEffect(() => {\n        window.addEventListener(\"message\", onMessageReceivedFromIframe);\n        return () =>\n            window.removeEventListener(\"message\", onMessageReceivedFromIframe);\n    }, [onMessageReceivedFromIframe]);\n    return React.useMemo(()=> {\n    return (\n        <div class=\"iframe-container\">\n            <iframe\n                id=\"1\"\n                name=\"my_frame\"\n                title=\"Title\"\n                src={`${_get(state, 'domain','https://app.greytip.qa.repute.net')}/mlogin?employerId=${_get(state, 'employerId', '5')}&token=${_get(state, 'token', 'npr7P8whB76XPI7Nsz0cIigj9DRjIJZt')}&tid=${_get(state, 'tid', '2')}`}\n                style={{ width: '85%', height: '100%', margin: 'auto', display: 'flex', justifyContent: 'center' }}\n                align=\"center\"\n                scrolling=\"yes\"\n                allow=\"camera;microphone\"\n            ></iframe>\n        </div>\n    )},[])\n}\n\nexport default IframeTest;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nlet TextBtn = (props) => {\n    const [state, setState] = useState({ token: \"\", employerId: \"\", tid: \"\" , domain :\"\"});\n\n    const handleChange = e => {\n        const { name, value } = e.target;\n        setState(prevState => ({\n            ...prevState,\n            [name]: value\n        }));\n    };\n\n\n\n    return (\n        <div>\n            <div style={{ display: 'flex', flexDirection: 'column', alignContent:'center', justifyContent:'center' }}>\n                <div style={{display: 'flex', margin: '10px'}}>\n                    <label style={{width: '200px'}}>Token :</label>\n                    <input\n                        value={state.token}\n                        type=\"text\"\n                        onChange={handleChange}\n                        name=\"token\"\n                    />\n                </div>\n                <div style={{display: 'flex', margin: '10px'}}>\n                    <label style={{width: '200px'}}>Employee Id :</label>\n                    <input\n                        value={state.employerId}\n                        type=\"text\"\n                        onChange={handleChange}\n                        name=\"employerId\"\n                    />\n                </div>\n                <div style={{display: 'flex', margin: '10px'}}>\n                    <label style={{width: '200px'}}>Tenant Id :</label>\n                    <input\n                        value={state.tid}\n                        type=\"text\"\n                        onChange={handleChange}\n                        name=\"tid\"\n                    />\n                </div>\n                <div style={{display: 'flex', margin: '10px'}}>\n                    <label style={{width: '300px'}}>Test Domain <span style={{fontSize:'8px'}}>(eg: `https://app.greytip.qa.repute.net`) </span> :</label>\n                    <input\n                        value={state.domain}\n                        type=\"text\"\n                        onChange={handleChange}\n                        name=\"domain\"\n                    />\n                </div>\n            </div>\n            <br/>\n            <br/>\n            <br/>\n            <button>\n                <Link to={{\n                    pathname: `/reputeiframe`,\n                    state: {\n                        token: state.token,\n                        employerId: state.employerId,\n                        tid: state.tid,\n                        domain : state.domain\n                    },\n                }}>Open Repute</Link></button>\n        </div>\n    );\n}\n\nexport default TextBtn;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport './App.css';\nimport IframeTest from './features/IframeTest';\nimport TextBtn from './features/TextBtn';\n// import Header from './features/Header/component';\n// import Dashboard from './features/Dashboard/container';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route component={IframeTest} path=\"/reputeiframe\" exact />\n        <Route component={TextBtn} path=\"/web_app1\" exact />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// export const FETCH_ALL_BOOKS = 'FETCH_ALL_BOOKS';\n// export const FETCH_ALL_CHAPTER_BOOKID = 'FETCH_ALL_CHAPTER_BOOKID';\nexport const FETCH_ALL_MOVIES = 'FETCH_ALL_MOVIES';\n// export const FETCH_ALL_QUOTES_MOVIEID = 'FETCH_ALL_QUOTES_MOVIEID';\n// export const FETCH_ALL_CHARACTERS = 'FETCH_ALL_CHARACTERS';\n// export const FETCH_ALL_QUOTE_CHARID = 'FETCH_ALL_QUOTE_CHARID';\n// export const FETCH_ALL_QUOTES = 'FETCH_ALL_QUOTES';\nexport const LOGIN_PROCESS_LOADING = 'LOGIN_PROCESS_LOADING';\nexport const SUBMIT_PROCESS_LOADING = 'SUBMIT_PROCESS_LOADING';\nexport const GET_LANGUAGE_OPTIONS = 'GET_LANGUAGE_OPTIONS';\n","import { combineReducers } from 'redux';\nimport {\n    FETCH_ALL_MOVIES, LOGIN_PROCESS_LOADING,\n    SUBMIT_PROCESS_LOADING, GET_LANGUAGE_OPTIONS,\n} from '../actionTypes';\n\nconst allMovies = (state = {}, action) => {\n    switch (action.type) {\n        case FETCH_ALL_MOVIES:\n            return { ...state, ...action.payload };\n        default:\n            return state;\n    }\n}\nconst loginResponse = (state = {}, action) => {\n    switch (action.type) {\n        case LOGIN_PROCESS_LOADING:\n            return { ...state, ...action.payload };\n        default:\n            return state;\n    }\n}\n\nconst submitUserResponse = (state = {}, action) => {\n    switch (action.type) {\n        case SUBMIT_PROCESS_LOADING:\n            return { ...state, ...action.payload };\n        default:\n            return state;\n    }\n}\n\nconst allLanguages = (state = [], action) => {\n    switch (action.type) {\n        case GET_LANGUAGE_OPTIONS:\n            return { ...state, ...action.payload };\n        default:\n            return state;\n    }\n}\n\nexport default combineReducers({\n    allMovies: allMovies,\n    loginResponse: loginResponse,\n    submitUserResponse: submitUserResponse,\n    allLanguages: allLanguages\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport {createStore, compose, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducers';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n\nconst middlewares = compose(\n  applyMiddleware(thunk),\n  window.devToolsExtension ? window.devToolsExtension({ name: 'lordApp' }) : f => f\n);\n\nconst appStore = createStore(rootReducer, undefined, middlewares);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={appStore}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}